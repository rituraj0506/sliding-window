 // subaaray with sum equal k same
 int numberOfSubarrays(vector<int>& arr, int n, int target){
        // code here
        unordered_map<int,int>m;
        int sum=0,c=0;
        for(int i=0;i<n;i++)
        {
         sum+=arr[i];
         if(sum==target)
         {
            c++; 
         }
         if(m.find(sum-target)!=m.end())
         {
             c+=m[sum-target];
         }
         m[sum]++;
        }
        return c;
    } 
    
    //Longest Sub-Array with Sum K 
    int lenOfLongSubarr(int A[],  int N, int K) 
    { 
        // Complete the function
        unordered_map<int,int>m;
        int sum=0;
        int maxi=0;
        m[sum]=-1;
        for(int i=0;i<N;i++)
        {
            sum+=A[i];
            if(m.find(sum-K)!=m.end())
             maxi=max(maxi,i-m[sum-K]);
             if(m.find(sum)==m.end())
             {
                 m[sum]=i;
             }
        }
        return maxi;
    } 
