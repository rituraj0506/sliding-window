 int smallestSubstring(string s) {
        // Code here
        int n=s.size();
        int i=0,j=0;
        int mini=INT_MAX;
        unordered_map<char,int>m;
        while(j<n)
        {
           m[s[j]]++;
           if(m.size()<3)
           j++;
           else if(m.size()==3)
           {
 // agar max nikal na hota to 3 se bara hota ans uss case m check else if(m.size()>3)  
               // but min case 3 se bara to nhi hoga oisliye yahi check karo
            while(m.size()==3)
               {
                   mini=min(mini,j-i+1);
                   m[s[i]]--;
                   if(m[s[i]]==0)
                   m.erase(s[i]);
                   i++;
               }
               j++;
           }
        }
        return mini==INT_MAX?-1:mini;
    }
    
    
Smallest distinct window

 int findSubString(string str)
    {
       set<int>s;
       int n=str.size();
       int mini=INT_MAX;
       unordered_map<int,int>m;
       for(int i=0;i<n;i++)
       {
         s.insert(str[i]); 
       }
       int k=s.size();
       int i=0,j=0;
       while(j<n)
       {
          m[str[j]]++;
          if(m.size()<k)
          {
              j++;
          }
          if(m.size()==k)
          {
              while(m.size()==k)
              {
                  mini=min(mini,j-i+1);
                  m[str[i]]--;
                  if(m[str[i]]==0)
                  m.erase(str[i]);
                  i++;
              }
              j++;
          }
       }
       return mini;
    }
